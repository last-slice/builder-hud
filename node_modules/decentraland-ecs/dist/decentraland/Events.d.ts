import { Observable } from '../ecs/Observable';
import { RaycastResponsePayload, CameraMode } from './Types';
export { CameraMode };
/**
 * @public
 */
export declare class UUIDEvent<T = any> {
    readonly uuid: string;
    readonly payload: T;
    constructor(uuid: string, payload: T);
}
/**
 * @public
 */
export declare class RaycastResponse<T> {
    readonly payload: RaycastResponsePayload<T>;
    constructor(payload: RaycastResponsePayload<T>);
}
/**
 * @public
 */
export declare class PointerEvent<GlobalInputEventResult> {
    readonly payload: GlobalInputEventResult;
    constructor(payload: GlobalInputEventResult);
}
/**
 * This event is triggered when you change your camera between 1st and 3rd person
 * @public
 */
export declare const onCameraModeChangedObservable: Observable<{
    cameraMode: CameraMode;
}>;
/**
 * This event is triggered when you change your camera between 1st and 3rd person
 * @public
 */
export declare const onIdleStateChangedObservable: Observable<{
    isIdle: boolean;
}>;
/**
 * These events are triggered after your character enters the scene.
 * @public
 */
export declare const onEnterSceneObservable: Observable<{
    userId: string;
}>;
export declare const onEnterScene: Observable<{
    userId: string;
}>;
/**
 * These events are triggered after your character leaves the scene.
 * @public
 */
export declare const onLeaveSceneObservable: Observable<{
    userId: string;
}>;
export declare const onLeaveScene: Observable<{
    userId: string;
}>;
/**
 * This event is triggered after all the resources of the scene were loaded (models, textures, etc...)
 * @public
 */
export declare const onSceneReadyObservable: Observable<{}>;
/**
 * @public
 */
export declare const onPlayerExpressionObservable: Observable<{
    expressionId: string;
}>;
